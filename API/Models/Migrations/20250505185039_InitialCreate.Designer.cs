// <auto-generated />
using System;
using API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Models.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250505185039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SkuCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 5, 18, 50, 39, 203, DateTimeKind.Utc).AddTicks(3000),
                            CreatedBy = 1,
                            Description = "Good",
                            IsDeleted = false,
                            Price = 18m,
                            ProductName = "Mango",
                            SkuCode = "MG-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 5, 18, 50, 39, 203, DateTimeKind.Utc).AddTicks(3003),
                            CreatedBy = 1,
                            Description = "Apples from china",
                            IsDeleted = false,
                            Price = 20m,
                            ProductName = "Apple",
                            SkuCode = "AP-002",
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 5, 18, 50, 39, 203, DateTimeKind.Utc).AddTicks(3006),
                            CreatedBy = 1,
                            Description = "Organic  bananas",
                            IsDeleted = false,
                            Price = 10m,
                            ProductName = "Banana",
                            SkuCode = "BN-003",
                            StockQuantity = 300
                        });
                });

            modelBuilder.Entity("API.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("SaleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PassWordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PassWordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 5, 18, 50, 39, 203, DateTimeKind.Utc).AddTicks(2647),
                            IsDeleted = false,
                            PassWordHash = new byte[] { 245, 77, 231, 158, 6, 144, 80, 124, 217, 107, 95, 61, 231, 174, 12, 217, 230, 48, 161, 40, 46, 109, 173, 132, 161, 246, 211, 186, 183, 83, 22, 152, 82, 110, 72, 204, 123, 88, 129, 124, 164, 62, 57, 26, 112, 252, 175, 81, 99, 11, 180, 146, 61, 157, 146, 131, 138, 99, 42, 212, 170, 65, 150, 158 },
                            PassWordSalt = new byte[] { 51, 175, 121, 122, 183, 88, 173, 71, 1, 236, 67, 128, 3, 103, 10, 40, 21, 214, 24, 127, 191, 216, 177, 255, 247, 111, 49, 48, 73, 27, 202, 37, 57, 236, 24, 74, 238, 116, 139, 143, 243, 119, 114, 163, 116, 238, 134, 169, 219, 97, 220, 44, 242, 99, 71, 148, 238, 31, 95, 179, 160, 42, 15, 129, 43, 111, 216, 112, 19, 65, 255, 135, 183, 71, 19, 40, 162, 163, 132, 196, 192, 138, 211, 77, 160, 193, 252, 133, 33, 226, 182, 239, 237, 224, 234, 72, 104, 74, 163, 113, 171, 12, 137, 129, 200, 70, 157, 63, 34, 15, 56, 83, 42, 87, 74, 215, 79, 59, 25, 11, 64, 193, 100, 196, 8, 229, 9, 61 },
                            Status = true,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 5, 18, 50, 39, 203, DateTimeKind.Utc).AddTicks(2666),
                            CreatedBy = 1,
                            IsDeleted = false,
                            PassWordHash = new byte[] { 243, 170, 32, 210, 23, 104, 180, 58, 159, 13, 62, 249, 102, 248, 229, 146, 91, 139, 56, 237, 44, 62, 166, 232, 57, 143, 87, 116, 254, 102, 165, 181, 20, 138, 220, 202, 70, 86, 159, 38, 3, 129, 219, 56, 160, 121, 71, 187, 60, 185, 18, 128, 125, 153, 147, 60, 104, 36, 227, 46, 132, 157, 188, 31 },
                            PassWordSalt = new byte[] { 62, 51, 243, 133, 160, 32, 103, 28, 227, 78, 40, 10, 254, 131, 104, 9, 8, 193, 141, 2, 137, 110, 218, 219, 250, 57, 61, 21, 2, 2, 25, 235, 42, 199, 41, 188, 51, 32, 221, 152, 102, 193, 214, 251, 11, 32, 180, 253, 209, 13, 33, 147, 28, 160, 183, 195, 96, 252, 52, 144, 30, 53, 176, 173, 191, 206, 2, 116, 117, 137, 228, 25, 111, 239, 125, 185, 225, 7, 212, 171, 19, 46, 235, 218, 143, 47, 38, 203, 77, 102, 44, 44, 156, 101, 145, 34, 171, 189, 101, 73, 211, 214, 44, 165, 215, 62, 217, 158, 0, 225, 160, 47, 200, 172, 152, 73, 19, 71, 102, 205, 38, 193, 6, 199, 66, 234, 71, 38 },
                            Status = true,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 5, 18, 50, 39, 203, DateTimeKind.Utc).AddTicks(2669),
                            CreatedBy = 1,
                            IsDeleted = false,
                            PassWordHash = new byte[] { 88, 105, 72, 44, 229, 112, 78, 39, 206, 192, 119, 155, 108, 178, 221, 122, 26, 4, 1, 5, 59, 176, 21, 64, 51, 180, 103, 216, 197, 91, 205, 79, 89, 236, 92, 8, 94, 168, 104, 211, 64, 37, 61, 249, 255, 170, 205, 163, 120, 177, 75, 150, 206, 54, 125, 216, 239, 191, 194, 157, 39, 222, 85, 54 },
                            PassWordSalt = new byte[] { 21, 84, 15, 149, 58, 147, 65, 23, 191, 41, 253, 216, 141, 147, 3, 78, 86, 61, 194, 64, 84, 192, 221, 21, 101, 3, 197, 28, 1, 73, 118, 224, 187, 205, 192, 84, 217, 143, 79, 221, 55, 158, 155, 55, 21, 199, 174, 243, 8, 203, 217, 209, 10, 45, 31, 250, 43, 210, 122, 3, 61, 165, 181, 232, 193, 42, 231, 217, 246, 129, 171, 162, 70, 54, 91, 23, 109, 19, 203, 229, 4, 196, 67, 98, 11, 253, 46, 48, 109, 25, 232, 24, 209, 196, 76, 245, 44, 94, 129, 195, 68, 189, 26, 55, 141, 255, 198, 221, 126, 118, 199, 23, 103, 35, 254, 43, 206, 103, 116, 184, 116, 111, 43, 204, 242, 137, 56, 60 },
                            Status = true,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.SaleItem", b =>
                {
                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.SaleOrder", "SaleOrder")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
