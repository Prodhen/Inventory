// <auto-generated />
using System;
using API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Models.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250506021908_stocktable")]
    partial class stocktable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SkuCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 6, 2, 19, 6, 108, DateTimeKind.Utc).AddTicks(8484),
                            CreatedBy = 1,
                            Description = "Good",
                            IsDeleted = false,
                            Price = 18m,
                            ProductName = "Mango",
                            SkuCode = "MG-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 6, 2, 19, 6, 108, DateTimeKind.Utc).AddTicks(8486),
                            CreatedBy = 1,
                            Description = "Apples from china",
                            IsDeleted = false,
                            Price = 20m,
                            ProductName = "Apple",
                            SkuCode = "AP-002",
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 6, 2, 19, 6, 108, DateTimeKind.Utc).AddTicks(8489),
                            CreatedBy = 1,
                            Description = "Organic  bananas",
                            IsDeleted = false,
                            Price = 10m,
                            ProductName = "Banana",
                            SkuCode = "BN-003",
                            StockQuantity = 300
                        });
                });

            modelBuilder.Entity("API.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("SaleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("API.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PassWordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PassWordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 6, 2, 19, 6, 108, DateTimeKind.Utc).AddTicks(8219),
                            IsDeleted = false,
                            PassWordHash = new byte[] { 134, 213, 7, 174, 31, 108, 26, 244, 3, 143, 24, 23, 126, 61, 51, 221, 190, 141, 72, 209, 166, 181, 180, 215, 41, 105, 143, 86, 41, 1, 75, 91, 112, 72, 124, 21, 207, 140, 125, 187, 183, 12, 123, 227, 158, 231, 94, 24, 16, 200, 66, 115, 100, 16, 238, 148, 147, 245, 105, 29, 76, 81, 9, 28 },
                            PassWordSalt = new byte[] { 191, 94, 90, 171, 87, 200, 116, 68, 86, 236, 75, 48, 33, 3, 206, 182, 180, 92, 122, 221, 116, 117, 39, 174, 125, 198, 44, 187, 219, 100, 127, 143, 177, 166, 11, 6, 230, 105, 112, 112, 49, 142, 138, 12, 163, 55, 9, 148, 5, 166, 243, 205, 220, 60, 254, 120, 2, 224, 193, 90, 234, 105, 90, 76, 103, 98, 36, 175, 121, 147, 216, 251, 179, 185, 62, 83, 223, 206, 251, 248, 9, 194, 104, 57, 48, 203, 208, 108, 180, 229, 163, 205, 165, 196, 155, 243, 177, 199, 215, 169, 152, 170, 118, 86, 178, 67, 187, 106, 107, 66, 210, 2, 187, 241, 37, 1, 35, 199, 210, 3, 116, 195, 150, 140, 155, 8, 159, 77 },
                            Status = true,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 6, 2, 19, 6, 108, DateTimeKind.Utc).AddTicks(8221),
                            CreatedBy = 1,
                            IsDeleted = false,
                            PassWordHash = new byte[] { 226, 145, 39, 90, 233, 87, 81, 32, 101, 123, 14, 221, 205, 116, 249, 104, 27, 187, 230, 54, 63, 87, 245, 194, 55, 133, 200, 144, 58, 195, 213, 179, 163, 49, 166, 149, 185, 71, 46, 162, 123, 73, 250, 137, 194, 203, 122, 68, 247, 85, 160, 199, 149, 187, 183, 110, 113, 180, 56, 68, 127, 118, 251, 141 },
                            PassWordSalt = new byte[] { 43, 74, 132, 114, 68, 241, 105, 131, 238, 10, 72, 168, 162, 191, 210, 107, 85, 218, 11, 214, 171, 48, 236, 104, 102, 227, 159, 158, 35, 28, 51, 220, 249, 152, 14, 103, 252, 240, 212, 41, 97, 159, 83, 155, 169, 43, 32, 138, 255, 126, 30, 27, 229, 11, 195, 119, 240, 4, 95, 141, 183, 78, 67, 98, 13, 114, 165, 25, 178, 166, 171, 208, 171, 39, 129, 50, 240, 199, 84, 32, 178, 110, 187, 120, 128, 251, 173, 53, 93, 1, 246, 48, 172, 157, 42, 206, 188, 183, 116, 95, 185, 35, 197, 226, 230, 40, 64, 205, 20, 36, 47, 29, 2, 3, 15, 78, 76, 149, 21, 254, 20, 6, 187, 189, 88, 195, 68, 183 },
                            Status = true,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 6, 2, 19, 6, 108, DateTimeKind.Utc).AddTicks(8273),
                            CreatedBy = 1,
                            IsDeleted = false,
                            PassWordHash = new byte[] { 99, 243, 69, 174, 1, 117, 235, 41, 94, 124, 56, 75, 200, 145, 187, 219, 158, 124, 134, 1, 248, 35, 230, 32, 218, 42, 165, 158, 30, 52, 13, 193, 75, 72, 208, 233, 139, 87, 27, 250, 171, 227, 176, 215, 205, 107, 12, 156, 92, 43, 188, 46, 205, 107, 76, 189, 187, 43, 83, 234, 251, 228, 112, 74 },
                            PassWordSalt = new byte[] { 131, 254, 181, 55, 150, 24, 176, 106, 6, 138, 148, 149, 221, 225, 165, 100, 153, 136, 215, 103, 115, 152, 210, 187, 254, 98, 183, 155, 18, 205, 86, 73, 153, 39, 246, 253, 48, 128, 29, 44, 155, 60, 203, 245, 166, 17, 132, 202, 41, 165, 63, 36, 191, 88, 205, 187, 183, 215, 13, 131, 126, 192, 212, 72, 221, 83, 3, 9, 202, 85, 93, 204, 155, 228, 27, 111, 203, 69, 56, 47, 152, 13, 208, 191, 88, 170, 27, 241, 1, 212, 2, 231, 86, 187, 15, 63, 226, 25, 47, 209, 125, 170, 72, 223, 37, 41, 57, 30, 35, 166, 92, 203, 254, 62, 197, 200, 224, 56, 193, 117, 104, 229, 183, 197, 187, 243, 81, 50 },
                            Status = true,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.SaleItem", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.SaleOrder", "SaleOrder")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Stock", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Product");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
