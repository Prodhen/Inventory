// <auto-generated />
using System;
using API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Models.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250505190845_AddFK")]
    partial class AddFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SkuCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 8, 44, 479, DateTimeKind.Utc).AddTicks(4516),
                            CreatedBy = 1,
                            Description = "Good",
                            IsDeleted = false,
                            Price = 18m,
                            ProductName = "Mango",
                            SkuCode = "MG-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 8, 44, 479, DateTimeKind.Utc).AddTicks(4519),
                            CreatedBy = 1,
                            Description = "Apples from china",
                            IsDeleted = false,
                            Price = 20m,
                            ProductName = "Apple",
                            SkuCode = "AP-002",
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 8, 44, 479, DateTimeKind.Utc).AddTicks(4521),
                            CreatedBy = 1,
                            Description = "Organic  bananas",
                            IsDeleted = false,
                            Price = 10m,
                            ProductName = "Banana",
                            SkuCode = "BN-003",
                            StockQuantity = 300
                        });
                });

            modelBuilder.Entity("API.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("SaleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PassWordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PassWordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 8, 44, 479, DateTimeKind.Utc).AddTicks(4200),
                            IsDeleted = false,
                            PassWordHash = new byte[] { 116, 136, 255, 218, 93, 213, 132, 203, 62, 16, 11, 168, 149, 147, 147, 100, 51, 230, 195, 230, 160, 10, 243, 64, 151, 118, 146, 225, 50, 61, 168, 138, 194, 24, 224, 237, 165, 54, 161, 1, 88, 57, 46, 251, 2, 13, 81, 104, 146, 178, 148, 200, 199, 197, 89, 59, 195, 123, 14, 120, 146, 198, 45, 5 },
                            PassWordSalt = new byte[] { 43, 27, 151, 90, 36, 185, 246, 128, 77, 43, 38, 107, 132, 96, 61, 86, 7, 106, 150, 217, 120, 24, 74, 216, 106, 94, 213, 21, 43, 100, 249, 196, 160, 116, 170, 47, 129, 1, 59, 242, 174, 16, 18, 14, 159, 194, 184, 188, 121, 83, 81, 168, 122, 146, 96, 175, 171, 90, 189, 206, 234, 188, 2, 248, 116, 36, 30, 15, 168, 217, 41, 197, 94, 134, 242, 138, 121, 170, 252, 16, 148, 239, 210, 22, 74, 197, 20, 16, 50, 164, 190, 184, 247, 160, 208, 16, 122, 229, 123, 7, 243, 220, 207, 41, 224, 109, 180, 88, 52, 2, 135, 221, 7, 43, 226, 49, 102, 109, 25, 102, 86, 154, 2, 91, 186, 91, 214, 97 },
                            Status = true,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 8, 44, 479, DateTimeKind.Utc).AddTicks(4202),
                            CreatedBy = 1,
                            IsDeleted = false,
                            PassWordHash = new byte[] { 82, 100, 169, 146, 214, 95, 224, 164, 12, 169, 15, 95, 195, 64, 159, 57, 64, 88, 205, 181, 108, 204, 108, 86, 134, 111, 209, 67, 245, 247, 0, 145, 196, 6, 207, 37, 3, 195, 234, 77, 75, 249, 245, 161, 134, 39, 34, 145, 245, 64, 33, 186, 136, 239, 174, 210, 64, 211, 176, 37, 174, 64, 213, 173 },
                            PassWordSalt = new byte[] { 9, 249, 12, 15, 8, 105, 253, 118, 168, 4, 5, 108, 66, 174, 23, 59, 156, 42, 16, 204, 208, 4, 188, 121, 19, 230, 104, 72, 86, 40, 159, 28, 5, 35, 13, 64, 203, 202, 196, 194, 58, 135, 72, 131, 125, 205, 232, 100, 73, 50, 118, 208, 216, 146, 105, 70, 206, 125, 84, 21, 238, 104, 126, 88, 55, 103, 95, 138, 114, 163, 24, 35, 129, 0, 205, 224, 243, 146, 214, 143, 225, 18, 130, 79, 211, 86, 43, 75, 244, 219, 154, 173, 212, 242, 17, 185, 70, 47, 253, 11, 226, 50, 95, 205, 14, 62, 243, 193, 205, 206, 195, 71, 107, 109, 189, 134, 130, 222, 4, 33, 248, 80, 157, 127, 97, 165, 174, 56 },
                            Status = true,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 8, 44, 479, DateTimeKind.Utc).AddTicks(4205),
                            CreatedBy = 1,
                            IsDeleted = false,
                            PassWordHash = new byte[] { 105, 30, 94, 4, 48, 111, 158, 166, 123, 245, 53, 94, 230, 171, 132, 217, 128, 20, 79, 181, 97, 88, 234, 145, 238, 203, 213, 65, 222, 2, 39, 74, 223, 49, 190, 133, 86, 133, 250, 115, 154, 132, 226, 7, 101, 154, 182, 101, 61, 77, 42, 125, 97, 152, 8, 149, 173, 65, 216, 145, 168, 145, 76, 198 },
                            PassWordSalt = new byte[] { 17, 207, 53, 228, 190, 113, 242, 103, 121, 71, 54, 60, 175, 116, 4, 165, 215, 82, 100, 180, 93, 255, 105, 85, 91, 135, 188, 202, 184, 168, 213, 173, 133, 254, 213, 39, 28, 211, 222, 223, 57, 241, 252, 22, 151, 65, 244, 19, 172, 12, 195, 79, 196, 56, 150, 84, 248, 16, 27, 231, 82, 221, 98, 140, 35, 89, 204, 153, 174, 178, 196, 48, 202, 220, 106, 174, 111, 194, 244, 184, 220, 189, 46, 247, 219, 175, 249, 71, 197, 16, 139, 152, 241, 195, 224, 247, 87, 88, 146, 114, 66, 211, 254, 57, 73, 235, 153, 121, 126, 51, 63, 116, 80, 10, 25, 24, 234, 62, 63, 226, 84, 232, 26, 97, 69, 185, 117, 30 },
                            Status = true,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.SaleItem", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.SaleOrder", "SaleOrder")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("API.Models.SaleOrder", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
